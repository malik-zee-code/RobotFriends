{"version":3,"sources":["component/card/card.component.jsx","component/Cardlist/cardlist.component.js","component/searchbox/searchbox.component.js","component/Scroll/scroll.component.js","App.js","reportWebVitals.js","index.js"],"names":["Card","name","id","email","className","src","alt","CardList","robots","map","user","i","Searchbox","searchChange","type","placeholder","style","borderRadius","border","outline","onChange","Scroll","props","overflowY","height","children","App","Onsearchchange","event","setState","searchbox","target","value","state","fetch","then","response","json","people","this","filteredRobots","filter","robot","toLowerCase","includes","length","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oRAaeA,EAXF,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,KAAKC,EAAc,EAAdA,GAAGC,EAAW,EAAXA,MACnB,OACI,sBAAKC,UAAU,kDAAf,UACI,qBAAKC,IAAG,+BAA4BH,EAA5B,YAA0CI,IAAI,UACtD,gCACI,6BAAKL,IACL,4BAAIE,WCYLI,EAjBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAClB,OACE,8BACGA,EAAOC,KAAI,SAACC,EAAMC,GACjB,OACE,cAAC,EAAD,CAEEV,KAAMO,EAAOG,GAAGV,KAChBC,GAAIM,EAAOG,GAAGT,GACdC,MAAOK,EAAOG,GAAGR,OAHZQ,SCPJC,EAAY,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aACzB,OACE,qBAAKT,UAAU,KAAf,SACE,uBACEA,UAAU,mCACVU,KAAK,SACLC,YAAY,iBACZC,MAAO,CAACC,aAAa,OAASC,OAAO,OAAQC,QAAQ,QACrDC,SAAWP,OCIJQ,EAbA,SAACC,GACd,OACE,qBACEN,MAAO,CACLO,UAAW,SACXL,OAAQ,kBACRM,OAAQ,SAJZ,SAOGF,EAAMG,YCoCEC,E,kDArCb,aAAe,IAAD,8BACZ,gBAMFC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAAEC,UAAWF,EAAMG,OAAOC,SANxC,EAAKC,MAAQ,CACXzB,OAAQ,GACRsB,UAAW,IAJD,E,qDAUd,WAAqB,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACL,EAAKT,SAAS,CAAErB,OAAQ8B,S,oBAI9B,WAAU,IAAD,EACuBC,KAAKN,MAA3BzB,EADD,EACCA,OAAQsB,EADT,EACSA,UACVU,EAAiBhC,EAAOiC,QAAO,SAACC,GACpC,OAAOA,EAAMzC,KAAK0C,cAAcC,SAASd,EAAUa,kBAErD,OAAQnC,EAAOqC,OAGb,sBAAKzC,UAAU,SAAf,UACE,oBAAIA,UAAU,KAAd,0BACA,cAAC,EAAD,CAAWS,aAAc0B,KAAKZ,iBAC9B,cAAC,EAAD,UACE,cAAC,EAAD,CAAUnB,OAAQgC,SANtB,gD,GAzBYM,IAAMC,WCITC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.5e758209.chunk.js","sourcesContent":["import React from 'react'\r\nimport './card.styles.css'\r\nconst Card = ({name,id,email}) => {\r\n    return(\r\n        <div className=\"bg-light-blue dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            <img src = {`https://robohash.org/${id}?200x200`} alt='robot'/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Card;","import React from \"react\";\r\nimport Card from \"../card/card.component\";\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div>\r\n      {robots.map((user, i) => {\r\n        return (\r\n          <Card\r\n            key={i}\r\n            name={robots[i].name}\r\n            id={robots[i].id}\r\n            email={robots[i].email}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\nexport const Searchbox = ({searchChange}) => {\r\n  return (\r\n    <div className=\"p2\">\r\n      <input\r\n        className=\"pa3 ba b--green bg-lightest-blue\"\r\n        type=\"search\"\r\n        placeholder=\"Search Monster\"\r\n        style={{borderRadius:'40px' , border:'none', outline:'none'}}\r\n        onChange ={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        overflowY: \"scroll\",\r\n        border: \"1px solid black\",\r\n        height: \"565px\",\r\n      }}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\nexport default Scroll;\r\n","import React from \"react\";\nimport \"./App.css\";\n//import Card from \"./component/card.component.jsx\"\nimport \"tachyons\";\nimport CardList from \"./component/Cardlist/cardlist.component\";\nimport { Searchbox } from \"./component/searchbox/searchbox.component\";\nimport Scroll from \"./component/Scroll/scroll.component\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      robots: [],\n      searchbox: \"\",\n    };\n  }\n  Onsearchchange = (event) => {\n    this.setState({ searchbox: event.target.value });\n  };\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((people) => {\n        this.setState({ robots: people });\n      });\n  }\n\n  render() {\n    const { robots, searchbox } = this.state;\n    const filteredRobots = robots.filter((robot) => {\n      return robot.name.toLowerCase().includes(searchbox.toLowerCase());\n    });\n    return !robots.length ? (\n      <h1>Loading...</h1>\n    ) : (\n      <div className=\"App tc\">\n        <h1 className=\"f1\">Robot Friend</h1>\n        <Searchbox searchChange={this.Onsearchchange} />\n        <Scroll>\n          <CardList robots={filteredRobots} />\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}